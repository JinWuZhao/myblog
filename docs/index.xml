<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda</title>
    <link>https://jinzhao.info/</link>
    <description>Recent content on Lambda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©jinzhao.info</copyright>
    <lastBuildDate>Thu, 28 Dec 2017 16:59:15 +0800</lastBuildDate>
    
	<atom:link href="https://jinzhao.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>学习Graphviz</title>
      <link>https://jinzhao.info/post/graphviz-learning/</link>
      <pubDate>Thu, 28 Dec 2017 16:59:15 +0800</pubDate>
      
      <guid>https://jinzhao.info/post/graphviz-learning/</guid>
      <description>使用go语言开发的朋友应该对pprof不会陌生，pprof可以导出像下面这种图： 那么问题来了，这是怎么生成的呢？
答案就是――Graphviz。
Graphviz Graphviz是一个自动化绘图的工具，用于绘制DOT语言描述的图形。
QuickStart 废话不多说，先上个例子，安装配置不讲了自己找。
假设我们描述一个简单的解释器的执行流程：
1. 获取输入（getInput) 2. 解析输入字符串（parse），成功转到3，失败转到5 3. 对parse出的AST求值（evaluate），成功转到4，失败转到6 4. 输出求值结果（putResult） 5. 提示语法错误（throwSyntaxError） 6. 求值过程出现异常，比如除0等（throwRuntimeError） 创建一个文件，名为interpreter.dot，并写入以下代码：
digraph Interpreter { getInput -&amp;gt; parse -&amp;gt; evaluate -&amp;gt; putResult; parse -&amp;gt; throwSyntaxError; evaluate -&amp;gt; throwRuntimeError; } 在终端执行以下命令：
dot -Tpng interpreter.dot -o interpreter.png 于是就得到了下面这张图：
这里生成的是png格式，也可以生成其它格式的文件，比如pprof生成的就是svg格式的。
DOT语言介绍 这是Graphviz文档里的DOT语法：
graph: [ strict ] (graph | digraph) [ ID ] &amp;#39;{&amp;#39; stmt_list &amp;#39;}&amp;#39; stmt_list: [ stmt [ &amp;#39;;&amp;#39; ] stmt_list ] stmt: node_stmt | edge_stmt | attr_stmt | ID &amp;#39;=&amp;#39; ID | subgraph attr_stmt: (graph | node | edge) attr_list attr_list: &amp;#39;[&amp;#39; [ a_list ] &amp;#39;]&amp;#39; [ attr_list ] a_list: ID &amp;#39;=&amp;#39; ID [ (&amp;#39;;&amp;#39; | &amp;#39;,&amp;#39;) ] [ a_list ] edge_stmt: (node_id | subgraph) edgeRHS [ attr_list ] edgeRHS: edgeop (node_id | subgraph) [ edgeRHS ] node_stmt: node_id [ attr_list ] node_id: ID [ port ] port: &amp;#39;:&amp;#39; ID [ &amp;#39;:&amp;#39; compass_pt ] | &amp;#39;:&amp;#39; compass_pt subgraph: [ subgraph [ ID ] ] &amp;#39;{&amp;#39; stmt_list &amp;#39;}&amp;#39; compass_pt: (n | ne | e | se | s | sw | w | nw | c | _) 详情请见：https://graphviz.</description>
    </item>
    
    <item>
      <title>博客测试</title>
      <link>https://jinzhao.info/post/my-first-post/</link>
      <pubDate>Wed, 27 Dec 2017 17:12:36 +0800</pubDate>
      
      <guid>https://jinzhao.info/post/my-first-post/</guid>
      <description> 这是标题 这是二级标题 这是内容
这是图片 这是链接 我的github
这是列表  列表1 列表2 列表3  这是代码 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 fmt.Println(&amp;#34;hello world&amp;#34;) 7} main : IO () main = putStrLn &amp;#34;hello world&amp;#34;</description>
    </item>
    
  </channel>
</rss>